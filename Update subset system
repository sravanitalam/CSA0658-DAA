#include <stdio.h>
#include <stdlib.h>
#define ARRAYSIZE(a) (sizeof(a))/(sizeof(a[0]))
static int total_nodes;
void printSubset(int A[], int size)
{
 for(int i = 0; i < size; i++)
 {
  printf("%*d", 5, A[i]);
 }
 printf("\n");
#include<stdio.h>
#include<conio.h>
#define TRUE 1
#define FALSE 0
int inc[50],w[50],sum,n;
int promising(int i,int wt,int total) {
	return(((wt+total)>=sum)&&((wt==sum)||(wt+w[i+1]<=sum)));
}
int comparator(const void *pLhs, const void *pRhs)
{
 int *lhs = (int *)pLhs;
 int *rhs = (int *)pRhs;
 return *lhs > *rhs;
void sumset(int i,int wt,int total) {
	int j;
	if(promising(i,wt,total)) {
		if(wt==sum) {
			printf("\n{\t");
			for (j=0;j<=i;j++)
			    if(inc[j])
			     printf("%d\t",w[j]);
			printf("}\n");
		} else {
			inc[i+1]=TRUE;
			sumset(i+1,wt+w[i+1],total-w[i+1]);
			inc[i+1]=FALSE;
			sumset(i+1,wt,total-w[i+1]);
		}
	}
}
void subset_sum(int s[], int t[],
    int s_size, int t_size,
    int sum, int ite,
    int const target_sum)
{
 total_nodes++;
 if( target_sum == sum )
 {
  printSubset(t, t_size);
  if( ite + 1 < s_size && sum - s[ite] + s[ite+1] <= target_sum )
  {
   subset_sum(s, t, s_size, t_size-1, sum - s[ite], ite + 1, target_sum);
  }
  return;
 }
 else
 {
  if( ite < s_size && sum + s[ite] <= target_sum )
  {
   for( int i = ite; i < s_size; i++ )
   {
    t[t_size] = s[i];

    if( sum + s[i] <= target_sum )
    {
     subset_sum(s, t, s_size, t_size + 1, sum + s[i], i + 1, target_sum);
    }
   }
  }
 }
}
void generateSubsets(int s[], int size, int target_sum)
{
 int *tuplet_vector = (int *)malloc(size * sizeof(int));
 int total = 0;
 qsort(s, size, sizeof(int), &comparator);
 for( int i = 0; i < size; i++ )
 {
  total += s[i];
 }
 if( s[0] <= target_sum && total >= target_sum )
 {
  subset_sum(s, tuplet_vector, size, 0, 0, 0, target_sum);
 }
 free(tuplet_vector);
}
int main()
{
 int weights[] = {15, 22, 14, 26, 32, 9, 16, 8};
 int target = 53;
 int size = ARRAYSIZE(weights);
 generateSubsets(weights, size, target);
 printf("Nodes generated %d\n", total_nodes);
 return 0;
int main() {
	int i,j,n,temp,total=0;
	printf("\n Enter how many numbers:\n");
	scanf("%d",&n);
	printf("\n Enter %d numbers to th set:\n",n);
	for (i=0;i<n;i++) {
		scanf("%d",&w[i]);
		total+=w[i];
	}
	printf("\n Input the sum value to create sub set:\n");
	scanf("%d",&sum);
	for (i=0;i<=n;i++)
	  for (j=0;j<n-1;j++)
	   if(w[j]>w[j+1]) {
		temp=w[j];
		w[j]=w[j+1];
		w[j+1]=temp;
	}
	printf("\n The given %d numbers in ascending order:\n",n);
	for (i=0;i<n;i++)
	  printf("%d \t",w[i]);
	if((total<sum))
	  printf("\n Subset construction is not possible"); else {
		for (i=0;i<n;i++)
		   inc[i]=0;
		printf("\n The solution using backtracking is:\n");
		sumset(-1,0,total);
	}
	getch();
}
